import { Markup } from 'telegraf';
import { bot } from './core/bot';
import { message } from 'telegraf/filters';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
import { HyperliquidController } from './modules/hyperliquid/hyperliquid.controller';
import { HyperliquidService } from './modules/hyperliquid/hyperliquid.service';
import { BinanceController } from './modules/binance/binance.controller';
import { BinanceService } from './modules/binance/binance.service';
import { ParadexController } from './modules/paradex/paradex.controller';
import { ParadexService } from './modules/paradex/paradex.service';
import { LighterController } from './modules/lighter/lighter.controller';
import { LighterService } from './modules/lighter/lighter.service';
import { NotificationService } from './modules/notifications/notification.service';
import { NotificationController } from './modules/notifications/notification.controller';
import { ExtendedController } from './modules/extended/extended.controller';
import { ExtendedService } from './modules/extended/extended.service';
import { RankingService } from './modules/ranking/ranking.service';
import { RankingController } from './modules/ranking/ranking.controller';
import { SummaryController } from './modules/summary/summary.controller';
import { SummaryService } from './modules/summary/summary.service';
import { TotalPositionsController } from './modules/totalPositions/totalPositions.controller';
import { TotalPositionsService } from './modules/totalPositions/totalPositions.service';

// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
const mainMenuKeyboard = Markup.keyboard([
    ['–ü–ª–µ—á–∏ –∏ –≠–∫–≤–∏—Ç–∏', 'üìä –°–≤–µ—Ä–∫–∞ –ü–æ–∑–∏—Ü–∏–π'],
    ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥–∏'],
    ['–í–∫–ª—é—á–∏—Ç—å Alert', '–í—ã–∫–ª—é—á–∏—Ç—å Alert']
]).resize();

const userState = new Map<number, string>();

async function start() {
    // --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –°–ï–†–í–ò–°–û–í ---
    const binanceService = new BinanceService();
    const hyperliquidService = new HyperliquidService();
    const paradexService = new ParadexService();
    const lighterService = new LighterService();
    const extendedService = new ExtendedService();
    const rankingService = new RankingService();

    // –°–µ—Ä–≤–∏—Å—ã-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
    const summaryService = new SummaryService(
        binanceService, hyperliquidService, paradexService, lighterService, extendedService
    );
    const totalPositionsService = new TotalPositionsService(
        binanceService, hyperliquidService, paradexService, lighterService, extendedService
    );
    const notificationService = new NotificationService(
        bot, binanceService, hyperliquidService, paradexService, lighterService, extendedService
    );

    // --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í ---
    const hyperliquidController = new HyperliquidController(hyperliquidService, userState);
    const binanceController = new BinanceController(binanceService, userState);
    const paradexController = new ParadexController(paradexService, userState);
    const lighterController = new LighterController(lighterService, userState);
    const extendedController = new ExtendedController(extendedService, userState);
    const rankingController = new RankingController(rankingService, userState);
    const summaryController = new SummaryController(summaryService);
    const totalPositionsController = new TotalPositionsController(totalPositionsService);
    const notificationController = new NotificationController(notificationService);

    // --- 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start ---
    bot.start((ctx) => {
        if (ctx.from) {
            userState.delete(ctx.from.id);
        }
        ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É.', mainMenuKeyboard);
    });

    // --- 4. –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê) ---
    bot.on(message('text'), (ctx) => {
        const userId = ctx.from?.id;
        if (!userId) return;

        const currentState = userState.get(userId);
        const text = ctx.message.text;

        const mainMenuCommands = ['–ü–ª–µ—á–∏ –∏ –≠–∫–≤–∏—Ç–∏', 'üìä –°–≤–µ—Ä–∫–∞ –ü–æ–∑–∏—Ü–∏–π', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥–∏', '–í–∫–ª—é—á–∏—Ç—å Alert', '–í—ã–∫–ª—é—á–∏—Ç—å Alert'];

        // --- –õ–û–ì–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 1: –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ú–ï–ù–Æ ---
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
        if (mainMenuCommands.includes(text)) {
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –º—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            userState.delete(userId);

            switch (text) {
                case '–ü–ª–µ—á–∏ –∏ –≠–∫–≤–∏—Ç–∏':
                    return summaryController.sendSummaryTable(ctx);
                case 'üìä –°–≤–µ—Ä–∫–∞ –ü–æ–∑–∏—Ü–∏–π':
                    return totalPositionsController.displayAggregatedPositions(ctx);
                case '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥–∏':
                    return rankingController.onUpdateRanksRequest(ctx);
                case '–í–∫–ª—é—á–∏—Ç—å Alert':
                    return notificationController.startMonitoring(ctx);
                case '–í—ã–∫–ª—é—á–∏—Ç—å Alert':
                    return notificationController.stopMonitoring(ctx);
            }
        }
        // --- –õ–û–ì–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 2: –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô ---
        // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –º–µ–Ω—é.
        else if (currentState === 'awaiting_ranks_json') {
            return rankingController.onRanksJsonReceived(ctx);
        }
        // --- –õ–û–ì–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö 3: –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê ---
        // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π, –Ω–∏ –≤–≤–æ–¥–æ–º –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        else {
            ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.', mainMenuKeyboard);
        }
    });

    // --- 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    await bot.launch();
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏!');
    const gracefulShutdown = (signal: string) => {
        console.log(`\n[Graceful Shutdown] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);

        // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        notificationService.stopAllMonitors();

        // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∞–º –±–æ—Ç (–æ–Ω –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        bot.stop(signal);

        console.log('[Graceful Shutdown] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.');

        // 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Node.js
        process.exit(0);
    };

    // –°–ª—É—à–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    // SIGINT - —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // SIGTERM - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è "–≤–µ–∂–ª–∏–≤–æ–≥–æ" –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—é –Ω–∞—à—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
start();