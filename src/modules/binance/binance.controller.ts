// src/modules/binance/binance.controller.ts

import { Context } from 'telegraf';
import { BinanceService } from './binance.service';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º —Ç–∏–ø–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type ReplyKeyboard = ReturnType<typeof import("telegraf").Markup.keyboard>;

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2.
 * Telegram —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —Å–∏–º–≤–æ–ª—ã . ! - = { } ( ) > # + _ | [ ] ` ~ –±—ã–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª—ç—à–µ–º.
 */

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç "–≤–∞–ª–∏–¥–Ω—ã–π" –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–∏
interface ValidAccountInfo {
    accountEquity: string;
    accountStatus: string;
    // ... –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
}

// –§—É–Ω–∫—Ü–∏—è-–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞
function isAccountInfoValid(data: any): data is ValidAccountInfo {
    return (
        data &&
        typeof data.accountEquity === 'string' &&
        typeof data.accountStatus === 'string'
    );
}
function escapeMarkdownV2(text: string): string {
    const specialChars = /[_*[\]()~`>#+\-=|{}.!]/g;
    return text.replace(specialChars, '\\$&');
}


export class BinanceController {
    constructor(
        private readonly binanceService: BinanceService,
        private readonly userState: Map<number, string>
    ) { }

    public async onEquityRequest(ctx: Context, mainMenuKeyboard: ReplyKeyboard) {
        try {
            await ctx.reply('‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Portfolio Margin –∞–∫–∫–∞—É–Ω—Ç–∞...');

            const accountInfo = await this.binanceService.getAccountInfo();
            // const posInfo = await this.binanceService.getPositionInfo()
            const leverage = await this.binanceService.calculateAccountLeverage()
            // console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API Binance:', accountInfo);
            // console.log('Pos Bin', posInfo)
            // // --- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–®–£ –ï–î–ò–ù–£–Æ –ü–†–û–í–ï–†–ö–£ ---
            // if (isAccountInfoValid(accountInfo)) {
            if (isFinite(leverage) && isAccountInfoValid(accountInfo)) {
                //     // –í–ù–£–¢–†–ò –≠–¢–û–ì–û –ë–õ–û–ö–ê TYPESCRIPT –£–ú–ù–´–ô!
                //     // –û–Ω –∑–Ω–∞–µ—Ç, —á—Ç–æ accountInfo –∏–º–µ–µ—Ç —Ç–∏–ø ValidAccountInfo,
                //     // –∞ –∑–Ω–∞—á–∏—Ç, –≤—Å–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏.
                console.log(accountInfo)
                //     // –ù–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫ 'undefined' –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç!
                //     const equity = parseFloat(accountInfo.accountEquity).toFixed(2);
                //     const status = accountInfo.accountStatus; // –¢–æ–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ

                //     const escapedEquity = escapeMarkdownV2(equity);
                //     const escapedStatus = escapeMarkdownV2(status);
                const formattedLeverage = leverage.toFixed(3);

                const escapedLeverage = escapeMarkdownV2(formattedLeverage);
                console.log('–ü–ª–µ—á–æ –ë–∏–Ω =', escapedLeverage)

                const message = `üöÄ *–ü–ª–µ—á–æ:* \`${escapedLeverage}\``;

                await ctx.reply(message, {
                    parse_mode: 'MarkdownV2',
                    ...mainMenuKeyboard
                });

            } else {
                // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                await ctx.reply(
                    '‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    mainMenuKeyboard
                );
            }

        } catch (error) {
            // ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ...
        }
    }
}