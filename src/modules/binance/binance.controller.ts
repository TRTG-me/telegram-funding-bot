// src/modules/binance/binance.controller.ts

import { Context } from 'telegraf';
import { BinanceService } from './binance.service';
import { IValidAccountInfoBin } from '../../common/interfaces'
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º —Ç–∏–ø–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type ReplyKeyboard = ReturnType<typeof import("telegraf").Markup.keyboard>;

// –§—É–Ω–∫—Ü–∏—è-–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞
function isAccountInfoValid(data: any): data is IValidAccountInfoBin {
    return (
        data &&
        typeof data.accountEquity === 'string' &&
        typeof data.accountStatus === 'string'
    );
}
function escapeMarkdownV2(text: string): string {
    const specialChars = /[_*[\]()~`>#+\-=|{}.!]/g;
    return text.replace(specialChars, '\\$&');
}

export class BinanceController {
    constructor(
        private readonly binanceService: BinanceService,
        private readonly userState: Map<number, string>
    ) { }

    public async onEquityRequest(ctx: Context, mainMenuKeyboard: ReplyKeyboard) {
        try {
            await ctx.reply('‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Portfolio Margin –∞–∫–∫–∞—É–Ω—Ç–∞...');

            const a = await this.binanceService.getDetailedPositions()
            const accountInfo = await this.binanceService.getAccountInfo();

            const info = await this.binanceService.calculateAccountLeverage()

            if (isFinite(info.leverage) && isAccountInfoValid(accountInfo)) {

                console.log(accountInfo)

                const formattedLeverage = info.leverage.toFixed(3);
                const formattedEquity = info.accountEquity.toFixed(1);
                const escapedEquity = escapeMarkdownV2(formattedEquity);
                const escapedLeverage = escapeMarkdownV2(formattedLeverage);


                let message = `üöÄ *–ü–ª–µ—á–æ:* ${escapedLeverage}\n`;
                message += `üí∞ *Account Equity:* ${escapedEquity}`;
                await ctx.reply(message, {
                    parse_mode: 'MarkdownV2',
                    ...mainMenuKeyboard
                });

            } else {
                // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                await ctx.reply(
                    '‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    mainMenuKeyboard
                );
            }

        } catch (error) {
            // ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ...
        }
    }
}