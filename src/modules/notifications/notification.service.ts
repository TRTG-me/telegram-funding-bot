import * as cron from 'node-cron';
import { Telegraf } from 'telegraf';

// –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Binance
class MockBinanceService {
    private equity = 10000;

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è –º–∞—Ä–∂–∏ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    constructor() {
        setTimeout(() => {
            this.equity = 700; // –ú–∞—Ä–∂–∞ —É–ø–∞–ª–∞
        }, 10000);
    }

    async getAccountEquity(): Promise<number> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ API
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ equity, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', this.equity);
        return this.equity;
    }
}
function escapeMarkdownV2(text: string): string {
    const specialChars = /[_*[\]()~`>#+\-=|{}.!]/g;
    return text.replace(specialChars, '\\$&');
}

export class NotificationService {
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ö–ª—é—á - chat.id, –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–¥–∞—á–∞ node-cron.
    private activeMonitors = new Map<number, cron.ScheduledTask>();
    private mockBinanceService = new MockBinanceService();

    constructor(private bot: Telegraf) { }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     */
    public startMarginMonitoring(chatId: number): boolean {
        if (this.activeMonitors.has(chatId)) {
            return false; // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.
        const task = cron.schedule('*/5 * * * * *', async () => {
            console.log(`[${new Date().toLocaleTimeString()}] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∂–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);

            try {
                const equity = await this.mockBinanceService.getAccountEquity();
                const marginThreshold = 1000; // –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

                if (equity < marginThreshold) {
                    const message = `üö® *–í–ù–ò–ú–ê–ù–ò–ï* üö®\n\n–ú–∞—Ä–∂–∞ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞\\!\n*–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ*: ${escapeMarkdownV2(equity.toString())}`;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await this.bot.telegram.sendMessage(chatId, message, { parse_mode: 'MarkdownV2' });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ä–∂–∏:', error);
                // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            }
        });

        this.activeMonitors.set(chatId, task);
        console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        return true;
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
     * @param chatId ID —á–∞—Ç–∞.
     */
    public stopMarginMonitoring(chatId: number): boolean {
        const task = this.activeMonitors.get(chatId);

        if (task) {
            task.stop();
            this.activeMonitors.delete(chatId);
            console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            return true;
        }

        return false; // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    }
}