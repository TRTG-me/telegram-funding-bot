// src/modules/notifications/notification.service.ts

import { Telegraf } from 'telegraf';
import * as fs from 'fs/promises';
import * as path from 'path';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –±–∏—Ä–∂ –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–Ω–æ–º–µ–Ω
import { BinanceService } from '../binance/binance.service';
import { HyperliquidService } from '../hyperliquid/hyperliquid.service';
import { ParadexService } from '../paradex/paradex.service';
import { LighterService } from '../lighter/lighter.service';
import { ExtendedService } from '../extended/extended.service';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–Ω–≥–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
interface Rank {
    min: number;
    max: number;
    emoji: string;
}

export class NotificationService {
    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private activeMonitors: Map<number, NodeJS.Timeout> = new Map();
    // –§–ª–∞–≥-"–∑–∞–º–æ–∫", —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    private isCheckRunning: boolean = false;
    // –ö–µ—à –ø–æ –±–∏—Ä–∂–∞–º: —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    private cache: Map<string, { ts: number; data?: { leverage: number; accountEquity: number } }> = new Map();
    // TTL –∫–µ—à–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    private CACHE_TTL = 35_000; // 30 —Å–µ–∫—É–Ω–¥
    // –°—á—ë—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: Map<userId, Map<exchangeName, count>>
    private errorCounters: Map<number, Map<string, number>> = new Map();
    // –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    private ERROR_THRESHOLD = 2;
    // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ shutdown
    private shuttingDown: boolean = false;

    constructor(
        private readonly bot: Telegraf<any>,
        private readonly binanceService: BinanceService,
        private readonly hyperliquidService: HyperliquidService,
        private readonly paradexService: ParadexService,
        private readonly lighterService: LighterService,
        private readonly extendedService: ExtendedService,
    ) { }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–Ω–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
     */
    private async _loadRanks(): Promise<Rank[]> {
        try {
            const ranksPath = path.join(__dirname, '..', '..', '..', 'ranking-config.json');
            const data = await fs.readFile(ranksPath, 'utf-8');
            return JSON.parse(data);
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ranking-config.json:', error);
            return [];
        }
    }


    private async _performCheck(userId: number): Promise<void> {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (this.shuttingDown) return;
        // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
        if (this.isCheckRunning) {
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
            return;
        }

        // "–ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–º–æ–∫", —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –≤—ã–∑–æ–≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏
        this.isCheckRunning = true;

        try {
            const freshRanks = await this._loadRanks();
            if (freshRanks.length < 4) {
                console.error("–§–∞–π–ª —Ä–∞–Ω–≥–æ–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–≥ —Ç—Ä–µ–≤–æ–≥–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
                return;
            }

            const alertThreshold = freshRanks[3].min; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥

            const exchangeServices = [
                { name: 'Binance', service: this.binanceService },
                { name: 'Hyperliquid', service: this.hyperliquidService },
                { name: 'Paradex', service: this.paradexService },
                { name: 'Lighter', service: this.lighterService },
                { name: 'Extended', service: this.extendedService },
            ];

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∫–µ—à–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API
            const results = await Promise.allSettled(
                exchangeServices.map(ex => this.getCachedLeverage(ex.name, ex.service))
            );

            results.forEach((result, index) => {
                const exchangeName = exchangeServices[index].name;

                // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏: –ª–∏–±–æ –ø–ª–µ—á–æ, –ª–∏–±–æ –æ—à–∏–±–∫–∞
                if (result.status === 'fulfilled') {
                    try {
                        // console.log(`${exchangeName} - ${result.value.leverage.toFixed(2)}`);
                    } catch (e) {
                        //  console.log(`${exchangeName} - ${String((result as any).value?.leverage)}`);
                    }
                } else {
                    console.log(`${exchangeName} - ERROR: ${String((result as any).reason)}`);
                }

                if (result.status === 'rejected') {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∏—Ä–∂–∏
                    let userMap = this.errorCounters.get(userId);
                    if (!userMap) {
                        userMap = new Map<string, number>();
                        this.errorCounters.set(userId, userMap);
                    }

                    const prev = userMap.get(exchangeName) || 0;
                    const next = prev + 1;
                    userMap.set(exchangeName, next);

                    const cached = this.cache.get(exchangeName);
                    if (!cached || !cached.data) {
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
                        if (next >= this.ERROR_THRESHOLD) {
                            const errorMessage = `‚ùóÔ∏è –û—à–∏–±–∫–∞ API –Ω–∞ –±–∏—Ä–∂–µ <b>${exchangeName}</b>. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (${next} –ø–æ–ø—ã—Ç–∫–∏).`;
                            if (!this.shuttingDown) {
                                this.bot.telegram.sendMessage(userId, errorMessage, { parse_mode: 'HTML' });
                            } else {
                                console.log(`[Shutdown] –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${userId}: ${errorMessage}`);
                            }
                            // –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                            userMap.set(exchangeName, 0);
                        } else {
                            console.log(`API ${exchangeName} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ü–æ–ø—ã—Ç–∫–∞ ${next}/${this.ERROR_THRESHOLD}.`);
                        }
                    } else {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫–µ—à, –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à, –Ω–µ –º–µ–Ω—è–µ–º —Å—á—ë—Ç—á–∏–∫
                        console.log(`API ${exchangeName} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –∫–µ—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`);
                    }

                    return;
                }

                const { leverage, accountEquity } = result.value;

                // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–±–∏—Ä–∂–∏
                const userMap = this.errorCounters.get(userId);
                if (userMap) {
                    userMap.set(exchangeName, 0);
                }

                if (leverage >= alertThreshold) {
                    const rank = freshRanks.find(r => leverage >= r.min && leverage < r.max);
                    const emoji = rank ? rank.emoji : '‚ÄºÔ∏è';
                    const equity = Math.round(accountEquity);
                    const leverageStr = leverage.toFixed(2);
                    const alertMessage = `${emoji} –í–Ω–∏–º–∞–Ω–∏–µ! –ë–∏—Ä–∂–∞ <b>${exchangeName}</b>\n–≠–∫–≤–∏—Ç–∏: <b>${equity}$</b>\n–ü–ª–µ—á–æ: <b>${leverageStr}x</b>`;
                    if (!this.shuttingDown) {
                        this.bot.telegram.sendMessage(userId, alertMessage, { parse_mode: 'HTML' });
                    } else {
                        console.log(`[Shutdown] –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è ${userId}: ${alertMessage}`);
                    }
                }
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            if (!this.shuttingDown) {
                this.bot.telegram.sendMessage(userId, 'üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
            } else {
                console.log(`[Shutdown] –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è ${userId}`);
            }
        } finally {
            // "–û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–º–æ–∫" –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞.
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.
            this.isCheckRunning = false;
        }
    }


    private async getCachedLeverage(serviceName: string, serviceInstance: any) {
        const now = Date.now();
        const entry = this.cache.get(serviceName);

        if (entry && entry.data && (now - entry.ts) < this.CACHE_TTL) {
            return entry.data;
        }

        try {
            const data = await serviceInstance.calculateLeverage();
            if (data && typeof data.leverage === 'number') {
                this.cache.set(serviceName, { ts: now, data });
            }
            return data;
        } catch (err) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π —É—Å–ø–µ—à–Ω—ã–π –∫–µ—à, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
            if (entry && entry.data) {
                return entry.data;
            }
            // –ò–Ω–∞—á–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            throw err;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public startMonitoring(userId: number): string {
        if (this.activeMonitors.has(userId)) {
            return '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.';
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 1 –º–∏–Ω—É—Ç—É (60 000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
        const intervalId = setInterval(() => this._performCheck(userId), 30000);

        this.activeMonitors.set(userId, intervalId);
        console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        return 'üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–µ—á–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.';
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public stopMonitoring(userId: number): string {
        const intervalId = this.activeMonitors.get(userId);

        if (intervalId) {
            clearInterval(intervalId);
            this.activeMonitors.delete(userId);
            console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            return 'üîï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–µ—á–µ–π –æ—Ç–∫–ª—é—á–µ–Ω.';
        } else {
            return '‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.';
        }
    }
    public stopAllMonitors(): void {
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        this.shuttingDown = true;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        if (this.activeMonitors.size > 0) {
            console.log(`[Graceful Shutdown] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${this.activeMonitors.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤...`);

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π
            for (const intervalId of this.activeMonitors.values()) {
                clearInterval(intervalId);
            }

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É
            this.activeMonitors.clear();
            console.log('[Graceful Shutdown] –í—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
        }
    }

}