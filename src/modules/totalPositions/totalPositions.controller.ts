import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import {
    TotalPositionsService,
    HedgedPair,
    UnhedgedPosition,
    AggregatedPositions
} from './totalPositions.service';

@Injectable()
export class TotalPositionsController {
    constructor(private readonly totalPositionsService: TotalPositionsService) { }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram.
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    public async displayAggregatedPositions(ctx: Context): Promise<void> {
        try {
            await ctx.reply('ü§ñ –ù–∞—á–∏–Ω–∞—é —Å–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');

            const { hedgedPairs, unhedgedPositions }: AggregatedPositions =
                await this.totalPositionsService.getAggregatedPositions();


            let message = '<pre><code>';


            message += 'Hedged Pairs\n';
            message += '----------------------------------------------------------\n';

            if (hedgedPairs.length > 0) {
                hedgedPairs.forEach(pair => {
                    const coin = pair.coin.padEnd(8);
                    const size = pair.size.toString().padEnd(8);
                    const notional = (pair.notional.toString() + '$').padEnd(12);
                    const exchanges = pair.exchanges.padEnd(6);
                    const funding1 = (pair.funding1.toString() + '%').padEnd(10);
                    const funding2 = (pair.funding2.toString() + '%').padEnd(10);
                    const fundingDiff = pair.fundingDiff.toString() + '%';

                    message += `${coin}${notional}${size}${exchanges}${funding1}${funding2}${fundingDiff}\n`;
                });
            } else {
                message += '–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n';
            }

            message += '\n';


            message += 'Unhedged Positions\n';
            message += '----------------------------------------------------------\n';

            if (unhedgedPositions.length > 0) {
                unhedgedPositions.forEach(pos => {
                    const coin = pos.coin.padEnd(8);

                    const notional = (pos.notional.toString() + '$').padEnd(12);
                    const size = pos.size.toString().padEnd(8);
                    const side = pos.side.padEnd(7);
                    const exchange = pos.exchange.padEnd(4);
                    const fundingRate = pos.fundingRate.toString() + '%';

                    message += `${coin}${notional}${size}${side}${exchange}${fundingRate}\n`;
                });
            } else {
                message += '–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω—ã.\n';
            }


            message += '</code></pre>';

            await ctx.replyWithHTML(message);

        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ TotalPositionsController:', error);
            await ctx.reply('üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞.');
        }
    }
}