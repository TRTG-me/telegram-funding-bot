// src/modules/summary/summary.controller.ts

import { Context } from 'telegraf';
// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∏–∑ —Å–µ—Ä–≤–∏—Å–∞.
import { SummaryService, FormattedExchangeData } from './summary.service';

export class SummaryController {
    constructor(private readonly summaryService: SummaryService) { }

    public async sendSummaryTable(ctx: Context) {
        try {
            await ctx.reply('–°–æ–±–∏—Ä–∞—é –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

            // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞.
            const data: FormattedExchangeData[] = await this.summaryService.getFormattedSummaryData();

            let messageRows = '';

            data.forEach(exchange => {
                const equity = Math.round(exchange.accountEquity);
                const leverage = `${exchange.emoji}${exchange.leverage.toFixed(2)}`;

                // --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
                // –ü—Ä–æ—Å—Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–∞ <code> –≤ —Ç–µ–≥ <b>
                messageRows += `<b>${exchange.name}</b>\n`;
                messageRows += `  Equity:   <b>${equity.toString().padStart(7)}$</b>\n`;
                messageRows += `  Leverage: <b>${leverage.padStart(7)}x</b>\n\n`;
            });

            const finalMessage = '<b>üìä –°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∏—Ä–∂–∞–º:</b>\n\n' + messageRows;

            await ctx.replyWithHTML(finalMessage);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}